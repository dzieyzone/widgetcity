<?php
// $Id: uc_fee.module,v 1.1.2.8 2009/11/16 19:12:13 mrfelton Exp $

/**
 * @file
 * Allows store administrators to define fees which can be associated with a product.
 */

/**
 * The fee is an absolute price and will be added to the base product price as is
 * This is the default setting.
 */
define('UC_FEE_TYPE_ABSOLUTE', 0x0001);

/**
 * The fee works as a percentage multiplier on the base price of the product
 */
define('UC_FEE_TYPE_PERCENTAGE', 0x0002);

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_help().
 */
function uc_fee_help($path, $arg) {
  switch ($path) {
    // Help messages for the globals feels overview.
    case 'admin/store/fees':
      return t('Add fees through this page and then use the <a href="!url">conditional actions interface</a> to add conditions to the fees that limit which orders they are applied to. Use the conditions link to jump to a particular fees conditions configuration page.', array('!url' => url(CA_UI_PATH)));
    // Help messages for the fees overview on products and classes.
    case 'node/%/edit/fees':
      return t('Override global fee settings for this product');
    case 'admin/store/products/classes/%/fees':
      return t('Override global fee settings for this product class');

   }
}

/**
 * Implementation of hook_menu().
 */
function uc_fee_menu() {
  $items['admin/store/fees'] = array(
    'title' => 'Fees',
    'description' => 'Create and edit fees.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_admin_form'),
    'access arguments' => array('administer products'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -1,
    'file' => 'uc_fee.admin.inc',
  );
  $items['admin/store/fees/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/store/fees/add'] = array(
    'title' => 'Add a fee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_form'),
    'access arguments' => array('administer products'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'uc_fee.admin.inc',
  );
  $items['admin/store/fees/%uc_fee/edit'] = array(
    'title' => 'Edit fee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_form', 3),
    'access arguments' => array('administer products'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_fee.admin.inc',
  );
  $items['admin/store/fees/%uc_fee/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_fee_delete_confirm', 3),
    'access arguments' => array('administer products'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_fee.admin.inc',
  );

  // Menu items for default product class fees.
  $items['admin/store/products/classes/%uc_product_class/fees'] = array(
    'title' => 'Fees',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_object_fees_form', 4, 'class'),
    'access arguments' => array('administer product classes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'uc_fee.admin.inc',
  );

  // Insert subitems into the edit node page for product types.
  $items['node/%node/edit/fees'] = array(
    'title' => 'Fees',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_object_fees_form', 1, 'product', 'overview'),
    'access callback' => 'uc_fee_product_fee_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'uc_fee.admin.inc',
  );
  $items['fee/calculate'] = array(
    'page callback' => 'uc_fee_javascript',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_init().
 */
function uc_fee_init() {
  require_once('uc_fee.ca.inc');
}

/**
 * Implementation of hook_access().
 */
function uc_fee_product_fee_access($node) {
  return uc_product_is_product($node) && node_access('update', $node);
}

/**
 * Implementation of hook_theme().
 */
function uc_fee_theme() {
  return array(
    'uc_fee_admin_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'uc_fee.admin.inc',
    ),
    'uc_fee_price' => array(
      'arguments' => array('fee' => NULL),
    ),
    'uc_fee_type' => array(
      'arguments' => array('fee' => NULL),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Attach fee descriptions to the form with the "Add to Cart" button.
 */
function uc_fee_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_form') {
    if (isset($form['panes']['payment'])) {
      drupal_add_js(array(
        'ucFeeWeight' => variable_get('uc_li_fee_weight', 9),
        'ucURL' => array(
          'calculateFee' => url('fee/calculate'),
        ),
      ), 'setting');
      drupal_add_js(drupal_get_path('module', 'uc_fee') .'/uc_fee.js');
    }
  }
  elseif ($form_id == 'uc_order_edit_form') {
    if (isset($form['quotes'])) {
      drupal_add_js(array(
        'ucURL' => array(
          'calculateFee' => url('fee/calculate'),
        ),
      ), 'setting');
      drupal_add_js(drupal_get_path('module', 'uc_fee') .'/uc_fee.js');
    }
  }
  elseif (strpos($form_id, 'add_to_cart_form') || strpos($form_id, 'add_product_form')) {
    // If the node has a product list, add fees to them
    if (count(element_children($form['products']))) {
      foreach (element_children($form['products']) as $key) {
        $form['products'][$key]['fees'] = _uc_fee_alter_form(node_load($key));
        if (is_array($form['products'][$key]['fees'])) {
          $form['products'][$key]['fees']['#tree'] = TRUE;
          $form['products'][$key]['#type'] = 'fieldset';
        }
      }
    }
    // If not, add fees to the node.
    else {
      $form['fees'] = _uc_fee_alter_form($form['#parameters'][2]);
      if (is_array($form['fees'])) {
        $form['fees']['#weight'] = -0.8;
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_fee_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (in_array($node->type, module_invoke_all('product_types'))) {
    switch ($op) {
      case 'load':
        $fees = uc_product_get_fees($node->nid);
        if (is_array($fees) && !empty($fees)) {
          return array('fees' => $fees);
        }
        break;
      case 'insert':
        switch ($GLOBALS['db_type']) {
          case 'mysqli':
          case 'mysql':
            db_query("INSERT IGNORE INTO {uc_product_fees} (nid, fid, price) SELECT %d, fid, price FROM {uc_class_fees} WHERE pcid = '%s'", $node->nid, $node->type);
            break;
          case 'pgsql':
            db_query("INSERT INTO {uc_product_fees} (nid, fid, price) SELECT %d, fid, price FROM {uc_class_fees} WHERE pcid = '%s'", $node->nid, $node->type);
            break;
        }
        break;
      case 'delete':
        db_query("DELETE FROM {uc_product_fees} WHERE nid = %d", $node->nid);
        break;
      case 'update index':
        $output = '';
        $fees = uc_product_get_fees($node->nid);
        foreach ($fees as $fee) {
          $output .= '<h3>'. $fee->name .'</h3>';
          $output .= "\n";
        }
        return $output;
    }
  }
}

/******************************************************************************
 * Ubercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of hook_product_class().
 */
function uc_fee_product_class($type, $op) {
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {uc_class_fees} WHERE pcid = '%s'", $type);
    break;
  }
}

/**
 * Implementation of Ãœbercart's hook_line_item().
 */
function uc_fee_line_item() {
  $items[] = array(
    'id' => 'fee',
    'title' => t('Fee'),
    'callback' => 'uc_fee_line_item_fee',
    'weight' => 9,
    'stored' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );
  return $items;
}

/**
 * Implementation of hook_order
 *
 * Update and save fee line items to the order.
 */
function uc_fee_order($op, $arg1, $arg2) {
  switch ($op) {
    case 'save':
      $changes = array();
      $line_items = uc_fee_line_item_fee('load', $arg1);
      if (is_array($arg1->line_items)) {
        //drupal_set_message('<pre>'. var_export($arg1->line_items, TRUE) .'</pre>');
        foreach ($arg1->line_items as $line) {
          if ($line['type'] == 'fee') {
            $delete = TRUE;
            foreach ($line_items as $id => $new_line) {
              if ($new_line['title'] == $line['title']) {
                if ($new_line['amount'] != $line['amount']) {
                  uc_order_update_line_item($line['line_item_id'], $new_line['title'], $new_line['amount']);
                  $changes[] = t('Changed %title to %amount.', array('%amount' => uc_currency_format($new_line['amount']), '%title' => $new_line['title']));
                }
                unset($line_items[$id]);
                $delete = FALSE;
                break;
              }
            }
            if ($delete) {
              uc_order_delete_line_item($line['line_item_id']);
              $changes[] = t('Removed %title.', array('%title' => $line['title']));
            }
          }
        }
      }
      if (is_array($line_items)) {
        foreach ($line_items as $line) {
          uc_order_line_item_add($arg1->order_id, $line['id'], $line['title'], $line['amount'], $line['weight']);
          $changes[] = t('Added %amount for %title.', array('%amount' => uc_currency_format($line['amount']), '%title' => $line['title']));
        }
      }
      if (count($changes)) {
        uc_order_log_changes($arg1->order_id, $changes);
      }
    break;
  }
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * Handle the fee line item.
 */
function uc_fee_line_item_fee($op, $order) {
  switch ($op) {
    case 'cart-preview':
      $fees = module_invoke_all('calculate_fees', $order);
      $script = '';
      foreach ($fees as $fee) {
        if ($fee->price > 0) {
          $weight = variable_get('uc_li_fee_weight', 7) + ($fee->weight / 10);
          $script .= "set_line_item('uc_fee_". $fee->fid ."', '". $fee->name ."', ". $fee->price .", + ". $weight .", 1, false);\n";
        }
      }
      if ($script) {
        drupal_add_js("if (Drupal.jsEnabled) { \$(document).ready(function() {
          if (window.set_line_item) {
            ". $script .";
            render_line_items();
          }
        })};", 'inline');
      }
      break;
    case 'load':
      $lines = array();
      $fees = module_invoke_all('calculate_fees', $order);
      foreach ($fees as $fee) {
        $lines[] = array(
          'id' => 'fee',
          'title' => $fee->name,
          'amount' => $fee->amount,
          'weight' => variable_get('uc_li_fee_weight', 7) + $fee->weight / 10,
        );
      }
      return $lines;
  }
}

/******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Load all fees.
 */
function uc_fee_get_fees() {
  static $fees = array();
  if (empty($fees)) {
    $result = db_query("SELECT * FROM {uc_fees} ORDER BY weight");
    while ($fee = db_fetch_object($result)) {
      $fees[$fee->fid] = $fee;
    }
  }
  return $fees;
}
 
/**
 * Loads all fees associated with a product node.
 */
function uc_product_get_fees($nid, $show_all=FALSE) {
  // Load product level fee overrides
  $object_fees = array();
  $result = db_query("SELECT pf.fid FROM {uc_product_fees} AS pf LEFT JOIN {uc_fees} AS f ON pf.fid = f.fid WHERE pf.nid = %d ORDER BY f.weight, f.name", $nid);
  while ($fee = db_fetch_object($result)) {
    $object_fees[$fee->fid] = uc_fee_load($fee->fid, $nid, 'product');
  }
  // merge with class fees
  $pcid = db_result(db_query("SELECT n.type FROM {node} AS n WHERE n.nid = %d", $nid));
  $all_fees = uc_class_get_fees($pcid);

  $product_fees = array();
  foreach ($all_fees as $fee) {
    // don't include fees that have been excluded
    if (!$show_all && $object_fees[$fee->fid] && !$object_fees[$fee->fid]->is_active) {
      continue;
    }
    $product_fees[$fee->fid] = $object_fees[$fee->fid]? $object_fees[$fee->fid] : $fee;
  }
  return $product_fees;
}

/**
 * Loads all fees associated with a product class.
 */
function uc_class_get_fees($pcid) {
  $object_fees = array();
  $result = db_query("SELECT cf.fid FROM {uc_class_fees} AS cf LEFT JOIN {uc_fees} AS f ON cf.fid = f.fid WHERE cf.pcid = '%s' ORDER BY f.weight, f.name", $pcid);
  while ($fee = db_fetch_object($result)) {
    $object_fees[$fee->fid] = uc_fee_load($fee->fid, $pcid, 'class');
  }
  // Merge with global fees
  $all_fees = uc_fee_get_fees();
  $class_fees = array();
  foreach ($all_fees as $fee) {
    // don't include fees that have been excluded
    if ($object_fees[$fee->fid] && !$object_fees[$fee->fid]->is_active) {
      continue;
    }
    $class_fees[$fee->fid] = $object_fees[$fee->fid]? $object_fees[$fee->fid] : $fee;
  }
  return $class_fees;
}

/**
 * Load a fee from the database.
 *
 * @param $fee_id
 *   The id of the fee.
 * @param $nid
 *   Node id. If given, the fee will have the options that have been
 *   assigned to that node for the fee.
 */
function uc_fee_load($fee_id, $nid = NULL, $type = '') {
  if ($nid) {
    switch ($type) {
      case 'product':
        $fee = db_fetch_object(db_query("SELECT f.fid, f.name, f.weight, f.price AS default_price, f.type, f.description, f.is_active AS default_is_active, f.max_applications, f.do_end_processing, f.is_exclusive, pf.price, pf.is_active, f.display_on_product FROM {uc_fees} AS f LEFT JOIN {uc_product_fees} AS pf ON f.fid = pf.fid AND pf.nid = %d WHERE f.fid = %d", $nid, $fee_id));
        break;
      case 'class':
        $fee = db_fetch_object(db_query("SELECT f.fid, f.name, f.weight, f.price AS default_price, f.type, f.description, f.is_active AS default_is_active, f.max_applications, f.do_end_processing, f.is_exclusive, cf.price, cf.is_active, f.display_on_product FROM {uc_fees} AS f LEFT JOIN {uc_class_fees} AS cf ON f.fid = cf.fid AND cf.pcid = '%s' WHERE f.fid = %d", $nid, $fee_id));
        break;
      default:
        $fee = db_fetch_object(db_query("SELECT * FROM {uc_fees} WHERE fid = %d", $fee_id));
        break;
    }
    if (isset($fee->default_price) && is_null($fee->price)) {
      $fee->price = $fee->default_price;
    }
    if (isset($fee->default_is_active) && is_null($fee->is_active)) {
      $fee->is_active = $fee->default_is_active;
    }
  }
  else {
    $fee = db_fetch_object(db_query("SELECT * FROM {uc_fees} WHERE fid = %d", $fee_id));
  }
  return $fee;
}

/**
 * Helper function for uc_fee_form_alter()
 */
function _uc_fee_alter_form($product) {

  // Load all applicible fees for the given nid.
  $fees = $product->fees;
  
  // If the product doesn't have fees, return the form as it is.
  if (!is_array($fees)) {
    return NULL;
  }

  $form_fees = array();

  // Loop through each product fee and generate its form element.
  foreach ($fees as $fee) {
    if ($fee->display_on_product) {
      $form_fees[$fee->fid] = array(
        '#type' => 'item',
        '#title' => $fee->name,
        '#description' => $fee->description,
        '#value' => theme('uc_fee_price', $fee),
      );
    }
  }
  return $form_fees;
}

/**
 * Calculates the fees for an order based on enabled fee modules.
 *
 * @param $order
 *   The full order object for the order want to calculate fees for.
 * @return
 *   An array of fees for the order.
 */
function uc_fee_calculate($order) {
  // Find any fees specified by enabled modules.
  $fees = module_invoke_all('calculate_fees', $order);

  return $fees;
}

/**
 * Calculate the amount and types of fees that apply to an order.
 */
function uc_fee_calculate_fees($order) {
  global $user;
  
  if (is_numeric($order)) {
    $order = uc_order_load($order);
    $account = user_load(array('uid' => $order->uid));
  }
  elseif ((int)$order->uid) {
    $account = user_load(array('uid' => intval($order->uid)));
  }
  else {
    $account = $user;
  }
  
  if (!is_object($order)) {
    return array();
  }

  if (is_array($order->line_items)) {
    foreach ($order->line_items as $i => $line) {
      if (substr($line['type'], 0, 4) == 'fee_') {
        unset($order->line_items[$i]);
      }
    }
  }
  $apply_fees = array();
  $applied_exclusive = FALSE;
  $fees = uc_fee_get_fees();
  
  $order->fees = array();
  $arguments = array(
    'order' => array(
      '#entity' => 'uc_order',
      '#title' => t('Order'),
      '#data' => $order,
    ),
    'fee' => array(
      '#entity' => 'fee',
      '#title' => t('Fee'),
      // #data => each $fee in the following foreach() loop;
    ),
    'account' => array(
      '#entity' => 'user',
      '#title' => t('User'),
      '#data' => $account,
    ),
  );
  
  foreach ($fees as $fee) {
    // skip fees which may not be applied with other fees
    if ($fee->is_exclusive && !empty($apply_fees)) {
      continue;
    }
    $arguments['fee']['#data'] = $fee;
    $predicates = ca_load_trigger_predicates('calculate_fees');
    if (ca_evaluate_conditions($predicates['uc_fee_'. $fee->fid], $arguments)) {
      $line_item = uc_fee_action_apply_fee($order, $fee);
      if ($line_item) {
        $order->fees[$line_item->id] = $line_item;
        // keep a record of which fees we have applied
        $apply_fees[$fee->fid] = array(
          'description' => check_plain($fee->description),
          'amount' => $line_item->amount,
        );
        // we have just applied an exclusive fee, or one which requests that we stop processing
        if ($fee->is_exclusive || $fee->do_end_processing) {
          break;
        }
      }
    }
  }
  return $order->fees;
}

/**
 * AJAX callback for order preview.
 *
 * Calculate fee amounts for an order in the payment checkout pane.
 */
function uc_fee_javascript() {
  $order = $_POST['order'];
  if ($order = unserialize(rawurldecode($order))) {
    $fees = module_invoke_all('calculate_fees', $order);
  }
  drupal_json((array) $fees);
}

/**
 * Theme functions.
 */
function theme_uc_fee_price($fee) {
  $fee_price = is_null($fee->default_price) ? $fee->price : $fee->default_price;
  return $fee->type == UC_FEE_TYPE_ABSOLUTE? uc_currency_format($fee_price) : $fee_price.'%';
}

function theme_uc_fee_type($fee) {
  return $fee->type == UC_FEE_TYPE_ABSOLUTE? t('Absolute') : t('Percentage');
}
