<?php

/**
 * prints an array for debugging
 */
function printa($arr, $ignore_admin=0) {
  if ($ignore_admin || user_access('access devel information')) {
      $backtrace = debug_backtrace();
      $file = $backtrace[0]['file'];
      $line = $backtrace[0]['line'];
      $func = $backtrace[1]['function'];

      print('<fieldset style="width:97%"><legend style="font-size:10px">');
      print "printa from\nfile=[$file],\nfunction=[$func],\nline=[$line]\n";
      print('</legend><pre style="border:none;background:none;">');
      print check_plain(print_r($arr, true));
      print('</pre></fieldset>');
  }
}

function _terms_by_vid(&$node, $vid) {
  $terms = array();
  $taxonomy = isset($node->taxonomy) ? $node->taxonomy : array();

  $vids = (is_array($vid)) ? $vid : array($vid);
  foreach ($taxonomy as $item) {
    if (in_array($item->vid, $vids)) {
      $terms[$item->tid] = $item;
    }
  }
  return $terms;
}
function _term_by_vid(&$node, $vid) {
  $terms = _terms_by_vid($node, $vid);
  return (count($terms)) ? array_shift($terms) : NULL;
}

function array_key_to_array($array, $key, $new_key=FALSE, $callback=NULL) {
    $new = array();
    if (is_array($array)) {
      foreach ($array as $id => $item) {
        if (!isset($key)) {
          $val = ($callback) ? $callback($item) : $item;
        }
        elseif (is_array($item) && isset($item[$key])) {
          $val = $item[$key];
        }
        elseif (is_object($item) && isset($item->$key)) {
          $val = $item->$key;
        }
        else {
          $val = null;
        }

        if ($new_key) {
          $new[$item->$new_key] = $val;
        }
        else {
          $new[$id] = $val;
        }
      }
    }
    return $new;
}



function field(&$node, $field_name, $index=0, $key='value') {
  $field_key = (substr($field_name, 0, 6)=='field_') ? $field_name : 'field_'. $field_name;

  if (!isset($index)) {
    return $node->{$field_key};
  }
  if (isset($node->{$field_key}[$index])) {
    $field = $node->{$field_key}[$index];
    if ($key == null) {
      return $field;
    }
    return $field[$key];
  }

  return null;
}



function field_implode(&$node, $field_name, $separator=', ', $key='value') {
  $values = field($node, $field_name, NULL, NULL);

  $new_values = array_key_to_array($values, $key);

  return isset($separator) ? implode($separator, $new_values) : $new_values;
}

function field_count(&$node, $field_name) {
  $field_key = (substr($field_name, 0, 6)=='field_') ? $field_name : 'field_'. $field_name;

  if (isset($node->{$field_key})) {
    return $node->{$field_key};
  }
}

function _get_node_type($nid) {
  static $cache = array();
  if (isset($cache[$nid])) {
    return $cache[$nid];
  }

  $item = db_fetch_object(db_query("SELECT type FROM {node} WHERE nid=%d", $nid));
  if ($item) {
    $cache[$nid] = $item->type;
  }
  return ($item) ? $cache[$nid] : NULL;
}

function _is_node_page() {
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == '') {
    return arg(1);
  }
  return 0;
}


function roundbox($content, $extra_class='', $extra_style='') {
  $output = <<<OUT
  <div class="round-box {$extra_class}" style="{$extra_style}">
    <div class="tl"><div class="tr"></div></div>
    <div class="ml"><div class="mr clear-block">$content</div></div>
    <div class="bl"><div class="br"></div></div>
  </div>
OUT;
  return $output;
}


function _page_match($pages) {
  $path = drupal_get_path_alias($_GET['q']);
  if (is_array($pages)) {
    $pages = implode("\r\n", $pages);
  }

  $regexp = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($pages, '/')) .')$/';
  // Compare with the internal and path alias (if any).
  $page_match = preg_match($regexp, $path);
  if ($path != $_GET['q']) {
    $page_match = $page_match || preg_match($regexp, $_GET['q']);
  }
  return $page_match;
}


function _page_node_type_match($types) {
  if ($nid = _is_node_page()) {
	$type = _get_node_type($nid);
	return in_array($type, $types);
  }
  return FALSE;
}


function site_specific_build_active_trail($type, $link) {
  static $trails = array();

  if (count($trails) == 0) {
    $trails['product'][] = array('title' => t('All Products'), 'href' => 'products', 'localized_options' => array());
    $trails['exotic_car'][] = array('title' => t('Exotic Car Guide'), 'href' => 'ExoticCarGuide.html', 'localized_options' => array());
    $trails['blog'][] = array('title' => t('Blog'), 'href' => 'blog', 'localized_options' => array());
	
  }

  return isset($trails[$type]) ? $trails[$type] : array();
}

function ckb_product_build_active_trail($book_link) {

}

function ckb_exotic_car_build_active_trail($book_link) {
  static $trail;

  if (!isset($trail)) {
    $trail = array();
    $trail[] = array('title' => t('Exotic Car Guide'), 'href' => 'ExoticCarGuide.html', 'localized_options' => array());
  }
  return $trail;
}